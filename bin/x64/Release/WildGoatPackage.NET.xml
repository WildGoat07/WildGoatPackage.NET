<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WildGoatPackage.NET</name>
    </assembly>
    <members>
        <member name="T:WGP.AdvancedMemoryStream">
            <summary>
            A memory stream that can insert data anywhere in its memory or remove data anywhere in its memory.
            </summary>
        </member>
        <member name="M:WGP.AdvancedMemoryStream.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WGP.AdvancedMemoryStream.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="size">Size of the memory to allocate.</param>
        </member>
        <member name="M:WGP.AdvancedMemoryStream.#ctor(System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="bytes">Initial buffer of the stream.</param>
        </member>
        <member name="M:WGP.AdvancedMemoryStream.Insert(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Insert a chunk of data in the memory.
            </summary>
            <param name="buffer">Data to insert.</param>
            <param name="offset">Position in the buffer to which the insertion begins.</param>
            <param name="count">The number of byte to insert.</param>
        </member>
        <member name="M:WGP.AdvancedMemoryStream.Remove(System.Int32)">
            <summary>
            Remove a portion of the memory.
            </summary>
            <param name="count">Number of bytes to remove.</param>
        </member>
        <member name="T:WGP.CHANNELS.Channel`1">
            <summary>
            A channel. It will transfer the master value to himself and his childs.
            </summary>
            <typeparam name="T">Type to share between channels.</typeparam>
        </member>
        <member name="M:WGP.CHANNELS.Channel`1.SetChildOf(WGP.CHANNELS.Module{`0})">
            <summary>
            Set the superior of this channel.
            </summary>
            <param name="superior">Channel or MasterChannel superior of this channel.</param>
        </member>
        <member name="M:WGP.CHANNELS.Channel`1.RemoveFromSuperior">
            <summary>
            Remove itself from its superior.
            </summary>
        </member>
        <member name="M:WGP.CHANNELS.Channel`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:WGP.CHANNELS.MasterChannel`1">
            <summary>
            
            </summary>
            <typeparam name="T">Type to share between channels.</typeparam>
        </member>
        <member name="P:WGP.CHANNELS.MasterChannel`1.CombineFunction">
            <summary>
            The combining function will be called to transfer a value from the superior to the child.
            </summary>
        </member>
        <member name="M:WGP.CHANNELS.MasterChannel`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:WGP.CHANNELS.Module`1">
            <summary>
            The base module of a channel.
            </summary>
            <typeparam name="T">Type to share between channels.</typeparam>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Multiplying(System.Single,System.Single)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Multiplication.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Dividing(System.Single,System.Single)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Division.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Adding(System.Single,System.Single)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Addition.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Substracting(System.Single,System.Single)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Substraction.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Multiplying(System.Double,System.Double)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Multiplication.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Dividing(System.Double,System.Double)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Division.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Adding(System.Double,System.Double)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Addition.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Substracting(System.Double,System.Double)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Substraction.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Multiplying(System.Int32,System.Int32)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Multiplication.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Dividing(System.Int32,System.Int32)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Division.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Adding(System.Int32,System.Int32)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Addition.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Substracting(System.Int32,System.Int32)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Substraction.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Multiplying(System.Int64,System.Int64)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Multiplication.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Dividing(System.Int64,System.Int64)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Division.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Adding(System.Int64,System.Int64)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Addition.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Substracting(System.Int64,System.Int64)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Substraction.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Multiplying(System.UInt64,System.UInt64)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Multiplication.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Dividing(System.UInt64,System.UInt64)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Division.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Adding(System.UInt64,System.UInt64)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Addition.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Substracting(System.UInt64,System.UInt64)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Substraction.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Multiplying(System.UInt32,System.UInt32)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Multiplication.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Dividing(System.UInt32,System.UInt32)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Division.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Adding(System.UInt32,System.UInt32)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Addition.</returns>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.Substracting(System.UInt32,System.UInt32)">
            <summary>
            Use the multiplication between the two given values.
            </summary>
            <param name="left">Left value.</param>
            <param name="right">Right value.</param>
            <returns>Substraction.</returns>
        </member>
        <member name="P:WGP.CHANNELS.Module`1.Value">
            <summary>
            The direct value of the module.
            </summary>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:WGP.CHANNELS.Module`1.FinalValue">
            <summary>
            Returns the final result of the value, from the master to the last channel.
            </summary>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.AddChild(WGP.CHANNELS.Channel{`0})">
            <summary>
            Adds a channel to its childs.
            </summary>
            <param name="chan">Channel to add.</param>
        </member>
        <member name="M:WGP.CHANNELS.Module`1.RemoveChild(WGP.CHANNELS.Channel{`0})">
            <summary>
            Remove a channel to its childs.
            </summary>
            <param name="chan">Channel to add.</param>
        </member>
        <member name="T:WGP.Angle">
            <summary>
            Angle class. Used for angle conversions.
            </summary>
        </member>
        <member name="P:WGP.Angle.Zero">
            <summary>
            Angle corresponing to 0 degrees or 0 radians.
            </summary>
        </member>
        <member name="P:WGP.Angle.Loop">
            <summary>
            Angle corresponing to 360 degrees or 2PI radians.
            </summary>
        </member>
        <member name="P:WGP.Angle.Degree">
            <summary>
            Angle in degrees.
            </summary>
        </member>
        <member name="P:WGP.Angle.Radian">
            <summary>
            Angle in radians.
            </summary>
        </member>
        <member name="M:WGP.Angle.#ctor(WGP.Angle)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WGP.Angle.RotateVector(SFML.System.Vector2f)">
            <summary>
            Returns the rotated vector corresponding to the angle.
            </summary>
            <param name="vector">Vector to rotate.</param>
        </member>
        <member name="M:WGP.Angle.RotateVector(System.Single,System.Single)">
            <summary>
            Returns the rotated vector corresponding to the angle.
            </summary>
            <param name="x">X component of the vector.</param>
            <param name="y">Y component of the vector.</param>
        </member>
        <member name="M:WGP.Angle.GenerateVector(System.Single)">
            <summary>
            Generates a vector based on the angle.
            </summary>
            <param name="length">The length of the vector. (Optional)</param>
            <returns>Generated vector.</returns>
        </member>
        <member name="M:WGP.Angle.FromDegrees(System.Single)">
            <summary>
            Creates a new instance from a value in degrees.
            </summary>
            <param name="degree">Value in degrees.</param>
            <returns>New Angle instance.</returns>
        </member>
        <member name="M:WGP.Angle.FromRadians(System.Single)">
            <summary>
            Creates a new instance from a value in radians.
            </summary>
            <param name="radian">Value in radians.</param>
            <returns>New Angle instance.</returns>
        </member>
        <member name="M:WGP.Angle.Cos">
            <summary>
            Returns the cosine of the angle.
            </summary>
            <returns>Cosine.</returns>
        </member>
        <member name="M:WGP.Angle.Sin">
            <summary>
            Returns the sinus of the angle.
            </summary>
            <returns>Sinus.</returns>
        </member>
        <member name="M:WGP.Angle.Tan">
            <summary>
            Returns the tangent of the angle.
            </summary>
            <returns>Tangent.</returns>
        </member>
        <member name="M:WGP.Angle.Cosh">
            <summary>
            Returns the hyperbolic cosine of the angle.
            </summary>
            <returns>Hyperbolic cosine.</returns>
        </member>
        <member name="M:WGP.Angle.Sinh">
            <summary>
            Returns the hyperbolic sinus of the angle.
            </summary>
            <returns>Hyperbolic sinus.</returns>
        </member>
        <member name="M:WGP.Angle.Tanh">
            <summary>
            Returns the hyperbolic tangent of the angle.
            </summary>
            <returns>Hyperbolic tangent.</returns>
        </member>
        <member name="M:WGP.Angle.ToString(System.String,System.IFormatProvider)">
            <summary>
            Format the string : "D" for the degrees, "R" for the radians.
            </summary>
            <param name="format">Format of the string.</param>
            <param name="formatProvider"></param>
            <returns>Formated string.</returns>
        </member>
        <member name="T:WGP.CapsuleHitbox">
            <summary>
            A capsule shaped hitbox.
            </summary>
        </member>
        <member name="P:WGP.CapsuleHitbox.HalfExtend">
            <summary>
            The half of the size of the rectangle (how much it will extend from the middle).
            </summary>
        </member>
        <member name="P:WGP.CapsuleHitbox.Radius">
            <summary>
            The radius of the corners.
            </summary>
        </member>
        <member name="P:WGP.CapsuleHitbox.NumberOfVerticesPerCorner">
            <summary>
            The number of vertices per corner. A higher value means more precise collisions but at a higher cost of performances.
            </summary>
        </member>
        <member name="M:WGP.CapsuleHitbox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:WGP.Chronometer">
            <summary>
            Chronometer with multiple functions.
            </summary>
        </member>
        <member name="P:WGP.Chronometer.Paused">
            <summary>
            If the chronometer is paused or not.
            </summary>
        </member>
        <member name="P:WGP.Chronometer.Speed">
            <summary>
            Change the speed. The speed is the factor by which is multiplied the elapsed time.
            </summary>
        </member>
        <member name="P:WGP.Chronometer.ElapsedTime">
            <summary>
            The current elapsed time.
            </summary>
        </member>
        <member name="M:WGP.Chronometer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WGP.Chronometer.#ctor(WGP.Chronometer)">
            <summary>
            Constructor. Used to set relative to another Chronometer. The main timer should not change its elapsed time to a lower value, as it may set a negative value to its childs.
            </summary>
            <param name="timer">Relative to.</param>
        </member>
        <member name="M:WGP.Chronometer.Restart">
            <summary>
            Restarts the chronometer.
            </summary>
        </member>
        <member name="T:WGP.CircleHitbox">
            <summary>
            A circle shaped hitbox.
            </summary>
        </member>
        <member name="P:WGP.CircleHitbox.Radius">
            <summary>
            The radius of the circle.
            </summary>
        </member>
        <member name="P:WGP.CircleHitbox.NumberOfVertices">
            <summary>
            The number of vertices of the circle. More vertices means more precision but at a higher cost of performances. 20 by Default.
            </summary>
        </member>
        <member name="M:WGP.CircleHitbox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:WGP.CustomHitbox">
            <summary>
            A custom shape for a hitbox. Can be convex or concave.
            </summary>
        </member>
        <member name="P:WGP.CustomHitbox.CustomShape">
            <summary>
            List of points composing the shape. DO NOT USE THE "Vertices" PROPERTY !
            </summary>
        </member>
        <member name="M:WGP.CustomHitbox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WGP.Extensions.Interpolation``1(WGP.IFunction,System.Single,``0,``0)">
            <summary>
            Returns an interpolation.
            </summary>
            <param name="fct">Referential function.</param>
            <param name="percent">Percent. Must be between [0,1].</param>
            <param name="min">Minimal value.</param>
            <param name="max">Maximal value.</param>
            <returns>Interpolation.</returns>
        </member>
        <member name="M:WGP.Extensions.Contains(SFML.Graphics.FloatRect,SFML.System.Vector2f)">
            <summary>
            Test if a FloatRect contains a Vector2f.
            </summary>
            <param name="rect">Box.</param>
            <param name="vec">Vector.</param>
            <returns>True if the vector is inside the box, false if not.</returns>
        </member>
        <member name="M:WGP.Extensions.LengthSquared(SFML.System.Vector2f)">
            <summary>
            Returns the length squared of a vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Length squared.</returns>
        </member>
        <member name="M:WGP.Extensions.GetLength(SFML.System.Vector2f)">
            <summary>
            Returns the length of a vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Length.</returns>
        </member>
        <member name="M:WGP.Extensions.SetLength(SFML.System.Vector2f,System.Single)">
            <summary>
            Returns the length of a vector.
            </summary>
            <param name="vector">Vector.</param>
            <param name="length">Length of the vector.</param>
            <returns>Length.</returns>
        </member>
        <member name="M:WGP.Extensions.Normalize(SFML.System.Vector2f)">
            <summary>
            Normalize a vector.
            </summary>
            <param name="vector">Vector to normalize.</param>
            <returns>Normalized vector.</returns>
        </member>
        <member name="M:WGP.Extensions.GetAngle(SFML.System.Vector2f)">
            <summary>
            Returns the angle of the vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:WGP.Extensions.SetAngle(SFML.System.Vector2f,WGP.Angle)">
            <summary>
            Sets the angle of the vector.
            </summary>
            <param name="vector">Vector.</param>
            <param name="angle">Angle of the vector.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:WGP.Extensions.Rotate(SFML.System.Vector2f,WGP.Angle)">
            <summary>
            Sets the angle of the vector.
            </summary>
            <param name="vector">Vector.</param>
            <param name="angle">Angle of the vector to add.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:WGP.Extensions.Intersection(WGP.Line,WGP.Line)">
            <summary>
            Returns the intersection between two lines.
            </summary>
            <param name="line1">First line.</param>
            <param name="line2">Second line.</param>
            <returns>Intersection of the lines.</returns>
            <remarks>The returned value is set to default if there is no collision.</remarks>
        </member>
        <member name="M:WGP.Extensions.Collision(WGP.Line,WGP.Line)">
            <summary>
            Test the collision between two lines. Test also the collision if one or both of the lines are segments.
            </summary>
            <param name="line1">First line.</param>
            <param name="line2">econd line.</param>
            <returns>True if there is a collision.</returns>
        </member>
        <member name="M:WGP.Extensions.CrossProduct(SFML.System.Vector2f,SFML.System.Vector2f)">
            <summary>
            Returns the cross product of two vectors.
            </summary>
            <param name="vec1">First vector.</param>
            <param name="vec2">Second vector.</param>
            <returns>Cross product.</returns>
        </member>
        <member name="M:WGP.Extensions.DotProduct(SFML.System.Vector2f,SFML.System.Vector2f)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="vec1">First vector.</param>
            <param name="vec2">Second vector.</param>
            <returns>Dot product.</returns>
        </member>
        <member name="M:WGP.Extensions.IsInRange``1(``0,``0,``0)">
            <summary>
            Tests if <paramref name="value"/> is in the [<paramref name="min"/> , <paramref name="max"/>] range. <paramref name="min"/> and <paramref name="max"/> are included in the range.
            </summary>
            <typeparam name="T">Type of the variable. Must be comparable.</typeparam>
            <param name="value">Value to compare.</param>
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            <returns>True if <paramref name="value"/> is in the range.</returns>
        </member>
        <member name="M:WGP.Extensions.Capped``1(``0,``0,``0)">
            <summary>
            Cap the value between a maximum and a minimum value.
            </summary>
            <typeparam name="T">Type of the variable. Must be comparable.</typeparam>
            <param name="value">Value to cap.</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <returns>Capped value.</returns>
        </member>
        <member name="M:WGP.Extensions.IsInRange(SFML.System.Time,SFML.System.Time,SFML.System.Time)">
            <summary>
            Tests if <paramref name="value"/> is in the [<paramref name="min"/> , <paramref name="max"/>] range. <paramref name="min"/> and <paramref name="max"/> are included in the range.
            </summary>
            <param name="value">Value to compare.</param>
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            <returns>True if <paramref name="value"/> is in the range.</returns>
        </member>
        <member name="M:WGP.Extensions.Capped(SFML.System.Time,SFML.System.Time,SFML.System.Time)">
            <summary>
            Cap the value between a maximum and a minimum value.
            </summary>
            <param name="value">Value to cap.</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <returns>Capped value.</returns>
        </member>
        <member name="M:WGP.Extensions.ReadInt16(System.IO.Stream)">
            <summary>
            Reads a base type and returns it.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Base type read.</returns>
        </member>
        <member name="M:WGP.Extensions.ReadInt32(System.IO.Stream)">
            <summary>
            Reads a base type and returns it.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Base type read.</returns>
        </member>
        <member name="M:WGP.Extensions.ReadInt64(System.IO.Stream)">
            <summary>
            Reads a base type and returns it.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Base type read.</returns>
        </member>
        <member name="M:WGP.Extensions.ReadUInt16(System.IO.Stream)">
            <summary>
            Reads a base type and returns it.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Base type read.</returns>
        </member>
        <member name="M:WGP.Extensions.ReadUInt32(System.IO.Stream)">
            <summary>
            Reads a base type and returns it.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Base type read.</returns>
        </member>
        <member name="M:WGP.Extensions.ReadUInt64(System.IO.Stream)">
            <summary>
            Reads a base type and returns it.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Base type read.</returns>
        </member>
        <member name="M:WGP.Extensions.ReadChar(System.IO.Stream)">
            <summary>
            Reads a base type and returns it.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Base type read.</returns>
        </member>
        <member name="M:WGP.Extensions.ReadSingle(System.IO.Stream)">
            <summary>
            Reads a base type and returns it.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Base type read.</returns>
        </member>
        <member name="M:WGP.Extensions.ReadDouble(System.IO.Stream)">
            <summary>
            Reads a base type and returns it.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Base type read.</returns>
        </member>
        <member name="M:WGP.Extensions.ReadBoolean(System.IO.Stream)">
            <summary>
            Reads a base type and returns it.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Base type read.</returns>
        </member>
        <member name="M:WGP.Extensions.ReadInt8(System.IO.Stream)">
            <summary>
            Reads a base type and returns it.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Base type read.</returns>
        </member>
        <member name="M:WGP.Extensions.ReadUInt8(System.IO.Stream)">
            <summary>
            Reads a base type and returns it.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Base type read.</returns>
        </member>
        <member name="M:WGP.Extensions.ReadString(System.IO.Stream,System.UInt32)">
            <summary>
            Reads a string (Unicode) and returns it.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="nbChars">Number of characters to read.</param>
            <returns>String read.</returns>
        </member>
        <member name="M:WGP.Extensions.ReadString(System.IO.Stream,System.UInt32,System.Text.Encoding)">
            <summary>
            Reads a string (Unicode) and returns it.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="nbChars">Number of characters to read.</param>
            <param name="encoding">Encoding of the string.</param>
            <returns>String read.</returns>
        </member>
        <member name="M:WGP.Extensions.WriteInt8(System.IO.Stream,System.SByte)">
            <summary>
            Write a base type.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="value">Base type to write.</param>
        </member>
        <member name="M:WGP.Extensions.WriteInt16(System.IO.Stream,System.Int16)">
            <summary>
            Write a base type.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="value">Base type to write.</param>
        </member>
        <member name="M:WGP.Extensions.WriteInt32(System.IO.Stream,System.Int32)">
            <summary>
            Write a base type.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="value">Base type to write.</param>
        </member>
        <member name="M:WGP.Extensions.WriteInt64(System.IO.Stream,System.Int64)">
            <summary>
            Write a base type.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="value">Base type to write.</param>
        </member>
        <member name="M:WGP.Extensions.WriteUInt8(System.IO.Stream,System.Byte)">
            <summary>
            Write a base type.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="value">Base type to write.</param>
        </member>
        <member name="M:WGP.Extensions.WriteUInt16(System.IO.Stream,System.UInt16)">
            <summary>
            Write a base type.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="value">Base type to write.</param>
        </member>
        <member name="M:WGP.Extensions.WriteUInt32(System.IO.Stream,System.UInt32)">
            <summary>
            Write a base type.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="value">Base type to write.</param>
        </member>
        <member name="M:WGP.Extensions.WriteUInt64(System.IO.Stream,System.UInt64)">
            <summary>
            Write a base type.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="value">Base type to write.</param>
        </member>
        <member name="M:WGP.Extensions.WriteBoolean(System.IO.Stream,System.Boolean)">
            <summary>
            Write a base type.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="value">Base type to write.</param>
        </member>
        <member name="M:WGP.Extensions.WriteSingle(System.IO.Stream,System.Single)">
            <summary>
            Write a base type.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="value">Base type to write.</param>
        </member>
        <member name="M:WGP.Extensions.WriteDouble(System.IO.Stream,System.Double)">
            <summary>
            Write a base type.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="value">Base type to write.</param>
        </member>
        <member name="M:WGP.Extensions.WriteChar(System.IO.Stream,System.Char)">
            <summary>
            Write a base type.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="value">Base type to write.</param>
        </member>
        <member name="M:WGP.Extensions.WriteString(System.IO.Stream,System.String)">
            <summary>
            Write a base type.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="value">Base type to write.</param>
        </member>
        <member name="M:WGP.Extensions.WriteString(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            Write a base type.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="value">Base type to write.</param>
            <param name="encoding">Encoding of the string.</param>
        </member>
        <member name="M:WGP.Extensions.TopLeft(SFML.Graphics.FloatRect)">
            <summary>
            Returns the top left point of the rect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Top left point.</returns>
        </member>
        <member name="M:WGP.Extensions.TopRight(SFML.Graphics.FloatRect)">
            <summary>
            Returns the top right point of the rect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Top right point.</returns>
        </member>
        <member name="M:WGP.Extensions.BotLeft(SFML.Graphics.FloatRect)">
            <summary>
            Returns the bottom left point of the rect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Bottom left point.</returns>
        </member>
        <member name="M:WGP.Extensions.BotRight(SFML.Graphics.FloatRect)">
            <summary>
            Returns the bottom right point of the rect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Bottom right point.</returns>
        </member>
        <member name="M:WGP.Extensions.Size(SFML.Graphics.FloatRect)">
            <summary>
            Returns the size of the rect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Size of the rect.</returns>
        </member>
        <member name="M:WGP.Extensions.Bot(SFML.Graphics.FloatRect)">
            <summary>
            Returns the bot value of the rect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Bot of the rect.</returns>
        </member>
        <member name="M:WGP.Extensions.Right(SFML.Graphics.FloatRect)">
            <summary>
            Returns the right value of the rect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Right of the rect.</returns>
        </member>
        <member name="M:WGP.Extensions.TopLeft(SFML.Graphics.IntRect)">
            <summary>
            Returns the top left point of the rect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Top left point.</returns>
        </member>
        <member name="M:WGP.Extensions.TopRight(SFML.Graphics.IntRect)">
            <summary>
            Returns the top right point of the rect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Top right point.</returns>
        </member>
        <member name="M:WGP.Extensions.BotLeft(SFML.Graphics.IntRect)">
            <summary>
            Returns the bottom left point of the rect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Bottom left point.</returns>
        </member>
        <member name="M:WGP.Extensions.BotRight(SFML.Graphics.IntRect)">
            <summary>
            Returns the bottom right point of the rect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Bottom right point.</returns>
        </member>
        <member name="M:WGP.Extensions.Size(SFML.Graphics.IntRect)">
            <summary>
            Returns the size of the rect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Size of the rect.</returns>
        </member>
        <member name="M:WGP.Extensions.Bot(SFML.Graphics.IntRect)">
            <summary>
            Returns the bot value of the rect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Bot of the rect.</returns>
        </member>
        <member name="M:WGP.Extensions.Right(SFML.Graphics.IntRect)">
            <summary>
            Returns the right value of the rect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Right of the rect.</returns>
        </member>
        <member name="M:WGP.Extensions.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
            Returns a random float between two values.
            </summary>
            <param name="randGen">Generator.</param>
            <param name="min">Min value.</param>
            <param name="max">Max value.</param>
            <returns>Random value.</returns>
        </member>
        <member name="M:WGP.Extensions.ToSFML(System.TimeSpan)">
            <summary>
            Converts the TimeSpan to a SFML Time.
            </summary>
            <param name="t">TimeSpan to converts.</param>
            <returns>The resulting Time.</returns>
        </member>
        <member name="M:WGP.Extensions.ToSystem(SFML.System.Time)">
            <summary>
            Converts the SFML Time to a TimeSpan.
            </summary>
            <param name="t">Time to converts.</param>
            <returns>The resulting TimeSpan.</returns>
        </member>
        <member name="M:WGP.Extensions.OnlyX(SFML.System.Vector2f)">
            <summary>
            Returns a vector with the Y axis set to 0.
            </summary>
            <param name="vec">Vector to extract the X axis.</param>
            <returns>The vector without the Y axis.</returns>
        </member>
        <member name="M:WGP.Extensions.OnlyY(SFML.System.Vector2f)">
            <summary>
            Returns a vector with the X axis set to 0.
            </summary>
            <param name="vec">Vector to extract the Y axis.</param>
            <returns>The vector without the X axis.</returns>
        </member>
        <member name="M:WGP.Extensions.OnlyX(SFML.System.Vector2u)">
            <summary>
            Returns a vector with the Y axis set to 0.
            </summary>
            <param name="vec">Vector to extract the X axis.</param>
            <returns>The vector without the Y axis.</returns>
        </member>
        <member name="M:WGP.Extensions.OnlyY(SFML.System.Vector2u)">
            <summary>
            Returns a vector with the X axis set to 0.
            </summary>
            <param name="vec">Vector to extract the Y axis.</param>
            <returns>The vector without the X axis.</returns>
        </member>
        <member name="M:WGP.Extensions.OnlyX(SFML.System.Vector2i)">
            <summary>
            Returns a vector with the Y axis set to 0.
            </summary>
            <param name="vec">Vector to extract the X axis.</param>
            <returns>The vector without the Y axis.</returns>
        </member>
        <member name="M:WGP.Extensions.OnlyY(SFML.System.Vector2i)">
            <summary>
            Returns a vector with the X axis set to 0.
            </summary>
            <param name="vec">Vector to extract the Y axis.</param>
            <returns>The vector without the X axis.</returns>
        </member>
        <member name="M:WGP.Extensions.Abs(System.Double)">
            <summary>
            Returns the absolute value.
            </summary>
            <param name="nb">Base number.</param>
            <returns>Absolute value.</returns>
        </member>
        <member name="M:WGP.Extensions.Abs(System.SByte)">
            <summary>
            Returns the absolute value.
            </summary>
            <param name="nb">Base number.</param>
            <returns>Absolute value.</returns>
        </member>
        <member name="M:WGP.Extensions.Abs(System.Int16)">
            <summary>
            Returns the absolute value.
            </summary>
            <param name="nb">Base number.</param>
            <returns>Absolute value.</returns>
        </member>
        <member name="M:WGP.Extensions.Abs(System.Int32)">
            <summary>
            Returns the absolute value.
            </summary>
            <param name="nb">Base number.</param>
            <returns>Absolute value.</returns>
        </member>
        <member name="M:WGP.Extensions.Abs(System.Int64)">
            <summary>
            Returns the absolute value.
            </summary>
            <param name="nb">Base number.</param>
            <returns>Absolute value.</returns>
        </member>
        <member name="M:WGP.Extensions.Abs(System.Single)">
            <summary>
            Returns the absolute value.
            </summary>
            <param name="nb">Base number.</param>
            <returns>Absolute value.</returns>
        </member>
        <member name="M:WGP.Extensions.CreateHitbox(SFML.Graphics.FloatRect)">
            <summary>
            Creates a hitbox from a Floatrect.
            </summary>
            <param name="rect">AABB.</param>
            <returns>Hitbox.</returns>
        </member>
        <member name="M:WGP.Extensions.Collision(WGP.IHitbox,SFML.System.Vector2f)">
            <summary>
            Check the collision between a hitbox and a point.
            </summary>
            <param name="box">Hitbox.</param>
            <param name="pt">Point.</param>
            <returns>True if there is a collision, false otherwise.</returns>
        </member>
        <member name="M:WGP.Extensions.Collision(WGP.IHitbox,SFML.System.Vector2f,SFML.System.Vector2f)">
            <summary>
            Check the collision between a hitbox and a point.
            </summary>
            <param name="box">Hitbox.</param>
            <param name="pt">Point.</param>
            <param name="infinitePt">A point that can not be in the hitbox in any way.</param>
            <returns>True if there is a collision, false otherwise.</returns>
        </member>
        <member name="M:WGP.Extensions.Collision(WGP.IHitbox,WGP.IHitbox)">
            <summary>
            Check the collision between two hitboxes.
            </summary>
            <param name="box1">First hitbox.</param>
            <param name="box2">Second hitbox.</param>
            <returns>True if there is a collision, false otherwise.</returns>
        </member>
        <member name="M:WGP.Extensions.Collision(WGP.IHitbox,WGP.IHitbox,SFML.System.Vector2f)">
            <summary>
            Check the collision between two hitboxes.
            </summary>
            <param name="box1">First hitbox.</param>
            <param name="box2">Second hitbox.</param>
            <param name="infinitePt">A point that can not be in any hitbox in any way.</param>
            <returns>True if there is a collision, false otherwise.</returns>
        </member>
        <member name="M:WGP.Extensions.TransformHitbox(SFML.Graphics.Transform,WGP.IHitbox)">
            <summary>
            Applies a transformation to an hitbox and returns the transformed one.
            </summary>
            <param name="tr">Transformation to apply.</param>
            <param name="box">Original hitbox.</param>
            <returns>Transformed hitbox.</returns>
        </member>
        <member name="M:WGP.Extensions.ToSerializable(SFML.Graphics.Transformable)">
            <summary>
            Convert the base SFML type to an ISerializable variant.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Serializable value.</returns>
        </member>
        <member name="M:WGP.Extensions.ToSerializable(SFML.System.Vector2f)">
            <summary>
            Convert the base SFML type to an ISerializable variant.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Serializable value.</returns>
        </member>
        <member name="M:WGP.Extensions.ToSerializable(SFML.System.Vector3f)">
            <summary>
            Convert the base SFML type to an ISerializable variant.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Serializable value.</returns>
        </member>
        <member name="M:WGP.Extensions.ToSerializable(SFML.System.Vector2i)">
            <summary>
            Convert the base SFML type to an ISerializable variant.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Serializable value.</returns>
        </member>
        <member name="M:WGP.Extensions.ToSerializable(SFML.System.Vector2u)">
            <summary>
            Convert the base SFML type to an ISerializable variant.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Serializable value.</returns>
        </member>
        <member name="M:WGP.Extensions.ToSerializable(SFML.Graphics.FloatRect)">
            <summary>
            Convert the base SFML type to an ISerializable variant.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Serializable value.</returns>
        </member>
        <member name="M:WGP.Extensions.ToSerializable(SFML.Graphics.IntRect)">
            <summary>
            Convert the base SFML type to an ISerializable variant.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Serializable value.</returns>
        </member>
        <member name="M:WGP.Extensions.ToSerializable(SFML.Graphics.Color)">
            <summary>
            Convert the base SFML type to an ISerializable variant.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Serializable value.</returns>
        </member>
        <member name="M:WGP.Extensions.ToSerializable(SFML.System.Time)">
            <summary>
            Convert the base SFML type to an ISerializable variant.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Serializable value.</returns>
        </member>
        <member name="T:WGP.HSVColor">
            <summary>
            Color using the HSV format.
            </summary>
        </member>
        <member name="P:WGP.HSVColor.H">
            <summary>
            Hue of the color.
            </summary>
            <value>Must be between [0,360[</value>
        </member>
        <member name="P:WGP.HSVColor.S">
            <summary>
            Saturation of the color.
            </summary>
            <value>Must be between [0,1]</value>
        </member>
        <member name="P:WGP.HSVColor.V">
            <summary>
            Value of the color.
            </summary>
            <value>Must be between [0,1]</value>
        </member>
        <member name="P:WGP.HSVColor.A">
            <summary>
            Alpha channel of the color.
            </summary>
        </member>
        <member name="M:WGP.HSVColor.#ctor(WGP.HSVColor)">
            <summary>
            Copy Constructor.
            </summary>
            <param name="copy">Color to copy.</param>
        </member>
        <member name="M:WGP.HSVColor.#ctor(System.Single,System.Single,System.Single,System.Byte)">
            <summary>
            Constructor.
            </summary>
            <param name="h">Hue.</param>
            <param name="s">Saturation.</param>
            <param name="v">Value.</param>
            <param name="a">Alpha.</param>
        </member>
        <member name="M:WGP.HSVColor.#ctor(SFML.Graphics.Color)">
            <summary>
            Constructor.
            </summary>
            <param name="color">SFML color.</param>
        </member>
        <member name="M:WGP.HSVColor.ToRgb">
            <summary>
            Convert the color to the RGB format.
            </summary>
            <returns>RGB color0</returns>
        </member>
        <member name="T:WGP.IFunction">
            <summary>
            Interface for functions.
            </summary>
        </member>
        <member name="M:WGP.IFunction.Image(System.Single)">
            <summary>
            Returns the image of the function.
            </summary>
            <param name="antecedent">Antecedent. Must be between [0,1].</param>
            <returns></returns>
        </member>
        <member name="T:WGP.IHitbox">
            <summary>
            Base of any hitbox.
            </summary>
        </member>
        <member name="P:WGP.IHitbox.Vertices">
            <summary>
            A group of ordered vertices composing the hitbox.
            </summary>
        </member>
        <member name="T:WGP.Line">
            <summary>
            Line class. Used in arithmetics.
            </summary>
        </member>
        <member name="P:WGP.Line.Position">
            <summary>
            A point of the line.
            </summary>
        </member>
        <member name="P:WGP.Line.Direction">
            <summary>
            The direction of the line. Always normalized.
            </summary>
        </member>
        <member name="M:WGP.Line.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WGP.Line.#ctor(WGP.Line)">
            <summary>
            Copy constructor.
            </summary>
            <param name="copy">Line to copy.</param>
        </member>
        <member name="M:WGP.Line.#ctor(SFML.System.Vector2f,SFML.System.Vector2f)">
            <summary>
            Constructor.
            </summary>
            <param name="pt1">First point of the line.</param>
            <param name="pt2">A point of the line different than <paramref name="pt1"/>.</param>
        </member>
        <member name="M:WGP.Line.GetPoint(System.Single)">
            <summary>
            Returns a point of the line.
            </summary>
            <param name="t">The scalar parameter.</param>
            <returns>Point equal to : "Position + t * Direction".</returns>
        </member>
        <member name="M:WGP.Line.AsSegment(System.Single)">
            <summary>
            Creates a segment from the line.
            </summary>
            <param name="length">Length of the segment.</param>
            <returns>Created segment from the line.</returns>
        </member>
        <member name="T:WGP.LinearFunction">
            <summary>
            A basic linear function.
            </summary>
        </member>
        <member name="M:WGP.LinearFunction.Image(System.Single)">
            <summary>
            Returns the image of the function.
            </summary>
            <param name="antecedent">Antecedent. Must be between [0,1].</param>
            <returns></returns>
        </member>
        <member name="T:WGP.PowFunction">
            <summary>
            A basic pow function.
            </summary>
        </member>
        <member name="P:WGP.PowFunction.Exponent">
            <summary>
            The exponent of the pow function.
            </summary>
            <value>Exponent.</value>
        </member>
        <member name="M:WGP.PowFunction.#ctor(System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="expo">Exponent. (Optional)</param>
        </member>
        <member name="M:WGP.PowFunction.Image(System.Single)">
            <summary>
            Returns the image of the function.
            </summary>
            <param name="antecedent">Antecedent. Must be between [0,1].</param>
            <returns></returns>
        </member>
        <member name="T:WGP.ProgressiveFunction">
            <summary>
            The progressvie function is a combination of 2 pow function (first normal, the second inverted) to looks smooth.
            </summary>
        </member>
        <member name="P:WGP.ProgressiveFunction.Roughness">
            <summary>
            The roughness is the exponent of the pow functions.
            </summary>
            <value>Exponent of the pow function.</value>
        </member>
        <member name="M:WGP.ProgressiveFunction.#ctor(System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="roughness">Roughness of the function. (Optional)</param>
        </member>
        <member name="M:WGP.ProgressiveFunction.Image(System.Single)">
            <summary>
            Returns the image of the function.
            </summary>
            <param name="antecedent">Antecedent. Must be between [0,1].</param>
            <returns></returns>
        </member>
        <member name="T:WGP.RectangleHitbox">
            <summary>
            A rectangular hitbox.
            </summary>
        </member>
        <member name="P:WGP.RectangleHitbox.HalfExtend">
            <summary>
            The half of the size of the rectangle (how much it will extend from the middle).
            </summary>
        </member>
        <member name="M:WGP.RectangleHitbox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:WGP.Segment">
            <summary>
            The segment is a line that is limited in length.
            </summary>
        </member>
        <member name="P:WGP.Segment.Length">
            <summary>
            Length of the segment.
            </summary>
        </member>
        <member name="M:WGP.Segment.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WGP.Segment.#ctor(WGP.Segment)">
            <summary>
            Copy constructor.
            </summary>
            <param name="copy">Segment to copy.</param>
        </member>
        <member name="M:WGP.Segment.#ctor(SFML.System.Vector2f,SFML.System.Vector2f)">
            <summary>
            Constructor.
            </summary>
            <param name="pt1">First point of the segment.</param>
            <param name="pt2">Last point of the segment.</param>
        </member>
        <member name="M:WGP.Segment.AsLine">
            <summary>
            Creates a line from the segment.
            </summary>
            <returns>Line created from the segment.</returns>
        </member>
        <member name="T:WGP.SERIALIZABLE.SerialTransformable">
            <summary>
            Used to link an ISerializable from a Transformable
            </summary>
        </member>
        <member name="F:WGP.SERIALIZABLE.SerialTransformable.Transformable">
            <summary>
            Base Transformable.
            </summary>
        </member>
        <member name="T:WGP.SERIALIZABLE.SerialVector2f">
            <summary>
            Used to link an ISerializable from a Vector2f
            </summary>
        </member>
        <member name="F:WGP.SERIALIZABLE.SerialVector2f.Vector">
            <summary>
            Base Vector2f.
            </summary>
        </member>
        <member name="T:WGP.SERIALIZABLE.SerialVector2i">
            <summary>
            Used to link an ISerializable from a Vector2i
            </summary>
        </member>
        <member name="F:WGP.SERIALIZABLE.SerialVector2i.Vector">
            <summary>
            Base Vector2i.
            </summary>
        </member>
        <member name="T:WGP.SERIALIZABLE.SerialVector2u">
            <summary>
            Used to link an ISerializable from a Vector2u
            </summary>
        </member>
        <member name="F:WGP.SERIALIZABLE.SerialVector2u.Vector">
            <summary>
            Base Vector2u.
            </summary>
        </member>
        <member name="T:WGP.SERIALIZABLE.SerialVector3f">
            <summary>
            Used to link an ISerializable from a Vector3f
            </summary>
        </member>
        <member name="F:WGP.SERIALIZABLE.SerialVector3f.Vector">
            <summary>
            Base Vector2u.
            </summary>
        </member>
        <member name="T:WGP.SERIALIZABLE.SerialFloatRect">
            <summary>
            Used to link an ISerializable from a FloatRect
            </summary>
        </member>
        <member name="F:WGP.SERIALIZABLE.SerialFloatRect.Box">
            <summary>
            Base FloatRect.
            </summary>
        </member>
        <member name="T:WGP.SERIALIZABLE.SerialIntRect">
            <summary>
            Used to link an ISerializable from a IntRect
            </summary>
        </member>
        <member name="F:WGP.SERIALIZABLE.SerialIntRect.Box">
            <summary>
            Base IntRect.
            </summary>
        </member>
        <member name="T:WGP.SERIALIZABLE.SerialTime">
            <summary>
            Used to link an ISerializable from a Time
            </summary>
        </member>
        <member name="F:WGP.SERIALIZABLE.SerialTime.Time">
            <summary>
            Base Time.
            </summary>
        </member>
        <member name="T:WGP.SERIALIZABLE.SerialColor">
            <summary>
            Used to link an ISerializable from a Color
            </summary>
        </member>
        <member name="F:WGP.SERIALIZABLE.SerialColor.Color">
            <summary>
            Base Color.
            </summary>
        </member>
        <member name="T:WGP.SubStream">
            <summary>
            A stream that can only read a portion of his base stream.
            </summary>
        </member>
        <member name="M:WGP.SubStream.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="sub">Base stream.</param>
            <param name="maxLength">Max length of the stream.</param>
            <param name="offset">Offset of the stream.</param>
            <param name="resetPosition">True if the sub stream set its Position to 0.</param>
        </member>
        <member name="P:WGP.SubStream.BaseStream">
            <summary>
            Base stream to read from.
            </summary>
        </member>
        <member name="P:WGP.SubStream.MaxLength">
            <summary>
            The max length of the portion.
            </summary>
        </member>
        <member name="P:WGP.SubStream.StartOffset">
            <summary>
            The offset of the position of the portion.
            </summary>
        </member>
        <member name="M:WGP.Utilities.Percent``1(``0,``0,``0)">
            <summary>
            Returns a percentage.
            </summary>
            <param name="value">Reference value.</param>
            <param name="min">Minmal value.</param>
            <param name="max">Maximal value.</param>
            <returns>Percentage.</returns>
        </member>
        <member name="M:WGP.Utilities.Percent(SFML.System.Time,SFML.System.Time,SFML.System.Time)">
            <summary>
            Returns a percentage.
            </summary>
            <param name="value">Reference value.</param>
            <param name="min">Minmal value.</param>
            <param name="max">Maximal value.</param>
            <returns>Percentage.</returns>
        </member>
        <member name="M:WGP.Utilities.Interpolation``1(System.Single,``0,``0)">
            <summary>
            Returns an interpolation.
            </summary>
            <param name="percent">Percent. Must be between [0,1].</param>
            <param name="min">Minimal value.</param>
            <param name="max">Maximal value.</param>
            <returns>Interpolation.</returns>
        </member>
        <member name="M:WGP.Utilities.SystemBitmapAsSFML(System.Drawing.Bitmap)">
            <summary>
            Returns an SFML image from a system bitmap image.
            </summary>
            <param name="img">Bitmap image.</param>
            <returns>SFML image.</returns>
        </member>
        <member name="M:WGP.Utilities.SFMLImageAsSystemBitmap(SFML.Graphics.Image)">
            <summary>
            Returns a system bitmap image from a system image.
            </summary>
            <param name="img">SFML image.</param>
            <returns>Bitmap image.</returns>
        </member>
        <member name="M:WGP.Utilities.GCD(System.Single,System.Single)">
            <summary>
            Returns the GCD of two numbers.
            </summary>
            <param name="a">First number.</param>
            <param name="b">Second number.</param>
            <returns>GCD of the two numbers.</returns>
        </member>
        <member name="M:WGP.Utilities.Min``1(``0[])">
            <summary>
            Returns the smallest value.
            </summary>
            <typeparam name="T">Type of the variables. Must be comparable.</typeparam>
            <param name="param">values.</param>
            <returns>Minimum value.</returns>
        </member>
        <member name="M:WGP.Utilities.Min(SFML.System.Time[])">
            <summary>
            Returns the smallest value.
            </summary>
            <param name="param">values.</param>
            <returns>Minimum value.</returns>
        </member>
        <member name="M:WGP.Utilities.Max``1(``0[])">
            <summary>
            Returns the biggest value.
            </summary>
            <typeparam name="T">Type of the variables. Must be comparable.</typeparam>
            <param name="param">values.</param>
            <returns>Maximum value.</returns>
        </member>
        <member name="M:WGP.Utilities.Max(SFML.System.Time[])">
            <summary>
            Returns the biggest value.
            </summary>
            <param name="param">values.</param>
            <returns>Maximum value.</returns>
        </member>
        <member name="M:WGP.Utilities.CreateRect(SFML.System.Vector2f[])">
            <summary>
            Creates a FloatRect from multiple coords. The resulting box will be able to contain all given coords.
            </summary>
            <param name="pts">Points.</param>
            <returns>Resulting FloatRect.</returns>
        </member>
    </members>
</doc>
